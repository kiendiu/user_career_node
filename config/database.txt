CREATE TABLE categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    name_category VARCHAR(255) NOT NULL,
    parent_id INT DEFAULT NULL,
    FOREIGN KEY (parent_id) REFERENCES categories(category_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    full_name NVARCHAR(255) NOT NULL,
    gender ENUM('Nam', 'Nu', 'Khac'),
    avatar VARCHAR(255),
    birthday DATE,
    phone VARCHAR(11) UNIQUE,
    social_media_url VARCHAR(255),
    address VARCHAR(255),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    balance_wallet INT DEFAULT 0,
    username NVARCHAR(255) UNIQUE,
    email VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    operator_status BIT,
    role ENUM('admin', 'user'),
    experience_years INT,
    skill_description TEXT
);

CREATE TABLE languages (
    language_id INT PRIMARY KEY AUTO_INCREMENT,
    name_language NVARCHAR(255) NOT NULL
);

CREATE TABLE user_languages (
    user_id INT,
    language_id INT,
    PRIMARY KEY (user_id, language_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (language_id) REFERENCES languages(language_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE experiences (
    experience_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    company NVARCHAR(255),
    category_id INT,
    start_time DATETIME,
    end_time DATETIME,
    currently_working TINYINT(1),
    job_description TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE certificates (
    certificate_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    name_certificate VARCHAR(255) NOT NULL,
    certificate_description TEXT,
    link_url VARCHAR(255),
    thumbnails VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE skills (
    skill_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    category_id INT,
    name_skill VARCHAR(255),
    experience_year INT,
    skill_description TEXT,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (category_id) REFERENCES categories(category_id) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE service_user (
    service_id INT PRIMARY KEY AUTO_INCREMENT,
    skill_id INT,
    user_id INT,
    time_online INT,
    price_online DOUBLE,
    time_offline INT,
    price_offline DOUBLE,
    FOREIGN KEY (skill_id) REFERENCES skills(skill_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE service_frame (
    service_frame_id INT PRIMARY KEY AUTO_INCREMENT,
    service_id INT,
    week_day ENUM('T2', 'T3', 'T4','T5','T6','T7','CN'),
    start_time TIME,
    end_time TIME,
    FOREIGN KEY (service_id) REFERENCES service_user(service_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE user_requests (
    request_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    contact_method ENUM('online', 'offline') NOT NULL,
    bidding_end_date DATETIME NOT NULL,
    location_name VARCHAR(255),
    address VARCHAR(255),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    status ENUM('open', 'closed') DEFAULT 'open',
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE bids (
    bid_id INT PRIMARY KEY AUTO_INCREMENT,
    expert_id INT,
    request_id INT,
    price DOUBLE NOT NULL,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'accepted', 'rejected', 'withdrawn') DEFAULT 'pending',
    FOREIGN KEY (expert_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (request_id) REFERENCES user_requests(request_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE request_progress (
    progress_id INT PRIMARY KEY AUTO_INCREMENT,
    request_id INT,
    bid_id INT,
    status ENUM('confirmed', 'in_progress', 'completed') DEFAULT 'confirmed',
    start_time DATETIME,
    end_time DATETIME,
    FOREIGN KEY (request_id) REFERENCES user_requests(request_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (bid_id) REFERENCES bids(bid_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE request_review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    request_id INT,
    user_id INT,
    rating TINYINT CHECK(rating >= 1 AND rating <= 5),
    review_description TEXT,
    feedback TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES user_requests(request_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    type ENUM('service', 'deposit'),
    amount DOUBLE,
    status ENUM('pending', 'completed', 'failed'),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE request_payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    request_id INT NOT NULL,
    transaction_id INT NOT NULL,
    amount DOUBLE NOT NULL,
    payment_method ENUM('COD', 'Bank', 'Paypal') NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (request_id) REFERENCES user_requests(request_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE book_services (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    service_id INT NOT NULL,
    user_id INT NOT NULL,
    expert_id INT NOT NULL,
    schedule_time DATETIME NOT NULL,
    duration INT NOT NULL, -- thời lượng dịch vụ (phút)
    total_price DOUBLE NOT NULL,
    note_message TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    status ENUM('pending', 'confirmed', 'in_progress', 'completed', 'cancelled') DEFAULT 'pending',
    FOREIGN KEY (service_id) REFERENCES service_user(service_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (expert_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE service_reviews (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT NOT NULL,
    user_id INT NOT NULL,
    expert_id INT NOT NULL,
    rating TINYINT CHECK(rating >= 1 AND rating <= 5),
    review_description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (book_id) REFERENCES book_services(book_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (expert_id) REFERENCES users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE wallet_deposit (
    deposit_id INT PRIMARY KEY AUTO_INCREMENT,
    transaction_id INT,
    cost DOUBLE NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    bank_payment ENUM('bank', 'paypal') NOT NULL,
    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE payment_service (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    transaction_id INT,
    book_id INT,
    cost DOUBLE NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    method_payment ENUM('COD', 'Bank') NOT NULL,
    FOREIGN KEY (transaction_id) REFERENCES transactions(transaction_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (book_id) REFERENCES book_services(book_id) ON DELETE CASCADE ON UPDATE CASCADE
);